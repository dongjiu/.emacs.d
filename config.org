* Common util functions
Some util functions are used in the following sections, so they should
be loaded first.
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/mylisp/z-string.el")
  (load-file "~/.emacs.d/mylisp/z-util.el")
#+END_SRC

* Environment
** User directory
On Windows, use environment variable %USERPROFILE% as the user
directory and save it in the *z-home* variable.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq z-home (getenv "USERPROFILE")))
#+END_SRC

** System bits
On windows, use the "/wmic os get osarchitecture/" command to determine
whether the system is 32-bit or 64-bit.
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (setq z-os-bit
            (if (string-match-p "64-bit" (shell-command-to-string "wmic os get osarchitecture")) 64 32)))
#+END_SRC

** Environment variables
*** PATH
Define the directories to add to PATH.
#+BEGIN_SRC emacs-lisp
  (setq z-path-dirs-to-add
        (if (eq system-type 'windows-nt)
            ;; windows paths
            (list "C:\\Program Files\\Git\\usr\\bin" ; diff
                  (concat z-home "\\softwares\\ES-1.1.0.8"))

          ;; non windows paths
          '("/Users/dzhu/bin"
            "/usr/local/bin")))
#+END_SRC

Add the directories to PATH environment variable and exec-path.
#+BEGIN_SRC emacs-lisp
  (z-path-add-dirs z-path-dirs-to-add)
  (setq exec-path (append exec-path z-path-dirs-to-add))
#+END_SRC

* Appearance
** Font
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (progn
        (set-frame-font "Consolas 10" t t)
        (when (display-graphic-p)
          (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font "fontset-default" 'han '("Microsoft YaHei" . "unicode-bmp")))))

    (set-frame-font "Monaco 10" t t)
    ;;(set-frame-font "-apple-Songti_SC-medium-normal-normal-*-*-*-*-*-p-0-iso10646-1")
    (when (display-graphic-p)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset
                          "-*-PingFang SC-normal-normal-normal-*-*-*-*-*-p-0-iso10646-1"))))
#+END_SRC

** Menu bar, scroll bar, tool bar and fringe
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (set-fringe-mode 0))
#+END_SRC

** Theme
Dark theme:
#+BEGIN_SRC emacs-lisp
  (defun z-dark-theme ()
    "Config dark theme."
    ;; load theme
    (load-theme 'tango-dark t)
    ;; mode line
    (set-face-attribute 'mode-line nil
                        :box nil
                        :foreground "gray"
                        :background "purple"
                        :box nil)
    ;; background color
    ;;    initial frame
    (add-to-list 'initial-frame-alist '(background-color . "gray15"))
    ;;    subsequent frames
    (add-to-list 'default-frame-alist '(background-color . "gray15"))
    ;; vertical bar color
    (set-face-attribute 'vertical-border nil :foreground "gray"))
#+END_SRC

Light theme:
#+BEGIN_SRC emacs-lisp
  (defun z-light-theme ()
    "Config light theme."
    ;; load theme
    (load-theme 'leuven t)
    ;; vertical bar color
    (set-face-attribute 'vertical-border nil :foreground "gray"))
#+END_SRC

Enable light theme:
#+BEGIN_SRC emacs-lisp
  (z-light-theme)
#+END_SRC

* Customization
** World time
Specify the time zones for display-time-world to display.
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list
        '(("UTC-8" "Shanghai")
          ("UTC" "UTC")
          ("PST8PDT" "Seattle")
          ("EST5EDT" "New York")
          ("GMT0BST" "London")
          ("CET-1CDT" "Paris")
          ("IST-5:30" "Bangalore")
          ("JST-9" "Tokyo")))
#+END_SRC

The output format is as follows:
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-time-format "[%Z][%z]\t%Y-%m-%d %H:%M\t%A\n")
#+END_SRC

** No beep
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Bookmark
Save the bookmark to the bookmark file when a bookmark is changed.
#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag 1)
#+END_SRC

** Diff
Use Ediff in a single frame, and split windows vertically.
#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;(setq ediff-window-setup-function 'ediff-setup-windows-multiframe)
(setq ediff-split-window-function 'split-window-horizontally) ;; vertical!!
#+END_SRC

Use vc-ediff instead of vc-diff in vc-mode.
#+BEGIN_SRC emacs-lisp
  (eval-after-load "vc-hooks"
    '(define-key vc-prefix-map "=" 'vc-ediff))
#+END_SRC

** Enable disabled functions
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
(setq dired-dwim-target t)
#+END_SRC

** Init buffer
When emacs is started, open eshell in the user directory.
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
        (lambda ()
          (setq default-directory (expand-file-name z-home))
          (eshell)))
#+END_SRC

** Tab
By default, tab expands to 4 spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+END_SRC

** Org
By default, "C-," runs /org-cycle-agenda-files/ in org mode. However,
I want to use "C-," for /set-mark-command/.

The following code overrides the default org key binding for "C-,".
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-,") 'set-mark-command)))
#+END_SRC

The following config hides the markup elements
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

** yes or no
Substitute y-or-n-p for yes-or-no-p.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Programming
** c
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)

  (c-add-style "my-style"
               '(
                 (indent-tabs-mode . nil)
                 (c-basic-offset . 4)))
#+END_SRC

** csharp
#+BEGIN_SRC emacs-lisp
  (add-hook 'csharp-mode-hook 'hs-minor-mode)

  (add-hook 'csharp-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (c-set-offset 'substatement-open 0)
              (c-set-offset 'inline-open 0)
              (c-set-offset 'case-label '+)
              (if (assoc 'inexpr-class c-offsets-alist)
                  (c-set-offset 'inexpr-class 0))
              (hs-minor-mode)
              (local-set-key (kbd "C-; C-; C-h") 'z-csharp-hide-methods)))
#+END_SRC

** java
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (c-set-offset 'substatement-open 0)
              (if (assoc 'inexpr-class c-offsets-alist)
                  (c-set-offset 'inexpr-class 0))))
#+END_SRC

** perl
#+BEGIN_SRC emacs-lisp
(defalias 'perl-mode 'cperl-mode)
(add-to-list 'auto-mode-alist '("\\.t?\\'" . cperl-mode))
#+END_SRC
** json
*z-node-exe* points to the node executable.
#+BEGIN_SRC emacs-lisp
(setq z-node-exe "D:/CorextCache/Node.js.with.uv.pipe.name.fixed.6.9.1/node.exe")
#+END_SRC

The following function can be used to beautify json in region. *node*
is required for this function to work.
#+BEGIN_SRC emacs-lisp
  (defun z-node-beautify-json ()
    "Beautify JSON in region."
    (interactive)
    (if (file-exists-p z-node-exe)
        (let ((file)
              (json (buffer-substring-no-properties (region-beginning) (region-end)))
              (cmd))
          (with-temp-buffer
            (find-file "~/.emacs.d/tmp.json")
            (erase-buffer)
            (insert json)
            (save-buffer)
            (setq file (buffer-file-name))
            (kill-buffer))
          (setq cmd (concat (replace-regexp-in-string "/" "\\\\" z-node-exe) " "
                            (replace-regexp-in-string "/" "\\\\" (expand-file-name "~/.emacs.d/javascript/beautify_json.js ")) " "
                            (replace-regexp-in-string "/" "\\\\" file)))
          (setq json (shell-command-to-string cmd))
          (delete-region (region-beginning) (region-end))
          (insert json))
      (message "Cannot find node executable file")))
#+END_SRC

** html
Use web-mode to edit html files.
#+BEGIN_SRC emacs-lisp
  (setq web-mode-markup-indent-offset 4)
  (setq web-mode-css-indent-offset 4)
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-script-padding 4)
  (setq web-mode-style-padding 4)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

* Utilities
** csharp
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/mylisp/z-csharp.el")
#+END_SRC

** Git
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/mylisp/z-git.el")
#+END_SRC

** Reminder
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/mylisp/z-reminder.el")
  (z-reminder-start t)
  (global-set-key (kbd "C-; r s") 'z-reminder-start)
  (global-set-key (kbd "C-; r e") 'z-reminder-stop)
  (global-set-key (kbd "C-; r r") 'z-reminder-report)
#+END_SRC
* Key bindings
** Change default key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'find-file-at-point)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Load ffap bindings
#+BEGIN_SRC emacs-lisp
(ffap-bindings)
#+END_SRC

** Set mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'set-mark-command)
#+END_SRC

** Run eshell
This function runs eshell in the current directory.
#+BEGIN_SRC emacs-lisp
  (defun z-run-eshell ()
    "Run eshell"
    (interactive)
    (if (string= major-mode "eshell-mode")
        (message "already in eshell mode")
      (let ((buf-name (concat "esh-" (buffer-name))))
        (if (get-buffer buf-name)
            (switch-to-buffer buf-name)
          (progn (eshell "dummy")
                 (rename-buffer buf-name))))))
#+END_SRC

Here is the key binding for it.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-h") 'z-run-eshell)
#+END_SRC

** "C-;" prefix
"C-;" is used as prefix to avoid conflicts with builtin key bindings.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-; t") 'display-time-world)
  (global-set-key (kbd "C-; i") 'imenu)
  (global-set-key (kbd "C-; p") 'z-goto-match-paren)
  (global-set-key (kbd "C-; g") 'rgrep)
  (global-set-key (kbd "C-; f") 'find-dired)
  (global-set-key (kbd "C-; w") 'ffap-copy-string-as-kill)
  (global-set-key (kbd "C-; C-; y") 'z-dup-line)
  (global-set-key (kbd "C-; C-; i") 'z-inc-num)
  (global-set-key (kbd "C-; d d") 'z-bing-dict-search-word)
  (global-set-key (kbd "C-; d r") 'z-bing-dict-search-region)
  (global-set-key (kbd "C-; d l") 'z-bing-dict-search-line)
  (global-set-key (kbd "C-; s l") 'z-bing-search-line)
  (global-set-key (kbd "C-; s r") 'z-bing-search-region)
  (global-set-key (kbd "C-; o c") 'org-capture)
#+END_SRC

*** Go to next appropriate point
Use "C-; C-f" to go to the next appropriate point in the buffer.
#+BEGIN_SRC emacs-lisp
  (defun z-next-appropriate-point ()
    "Go to the next appropriate point based on the context."
    (interactive)
    (cond
     ((string= major-mode "web-mode")
      (search-forward "=\"" nil t))
     (t forward-char)))

  (global-set-key (kbd "C-; C-f") 'z-next-appropriate-point)
#+END_SRC

*** Go to scratch buffer
#+BEGIN_SRC emacs-lisp
  (defun z-goto-scratch ()
    "Go to scratch buffer."
    (interactive)
    (switch-to-buffer "*scratch*"))

  (global-set-key (kbd "C-; C-; s") 'z-goto-scratch)
#+END_SRC

** Bookmarks
Key binding for opening the /bookmarks.org/ file that is used save
bookmarks for URL, files and directories.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-; b")
                  (lambda ()
                    (interactive)
                    (find-file-other-window "~/.emacs.d/bookmarks.org")))
#+END_SRC
* Abbreviations
** Minor modes
*** z-shell-mode
This mode is enabled when in shell or eshell mode.
#+BEGIN_SRC emacs-lisp
  (define-minor-mode z-shell-mode
    "Better shell interaction"
    :lighter " z-sh")
  (add-hook 'shell-mode-hook 'z-shell-mode)
  (add-hook 'eshell-mode-hook 'z-shell-mode)
#+END_SRC

*** z-code-mode
This mode is enabled when writing code.
#+BEGIN_SRC emacs-lisp
  (define-minor-mode z-code-mode
    "Accelerate coding"
    :lighter " z-code")
  (add-hook 'c-mode-hook 'z-code-mode)
  (add-hook 'c++-mode-hook 'z-code-mode)
  (add-hook 'java-mode-hook 'z-code-mode)
  (add-hook 'csharp-mode-hook 'z-code-mode)
  (add-hook 'typescript-mode-hook 'z-code-mode)

#+END_SRC

*** z-web-mode
This mode is enabled when in web-mode or html-mode.
#+BEGIN_SRC emacs-lisp
  (define-minor-mode z-web-mode
    "Accelerate web programming"
    :lighter " z-web")
  (add-hook 'html-mode-hook 'z-web-mode)
  (add-hook 'web-mode-hook 'z-web-mode)
#+END_SRC

*** z-msbuild-mode
This mode is enabled when writing msbuild files.
#+BEGIN_SRC emacs-lisp
  (define-minor-mode z-msbuild-mode
    "Accelerate msbuild"
    :lighter " z-msb")
#+END_SRC

** Abbrev tables
Abbrevs are defined in a separate file. They are linked to
corresponding modes through the above minor modes.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/mylisp/z-abbrevs.el")
(setq-default abbrev-mode t)
#+END_SRC

* GPG
The following function encrypts a file using GPG.
#+BEGIN_SRC emacs-lisp
  (defun z-encrypt-file (file key-name &optional output-file)
    "Encrypt FILE with public key that matches NAME."
    (let ((context (epg-make-context)) (keys))
      (if (file-exists-p file)
          (progn (setq keys (epg-list-keys context key-name))
                 (if keys
                     (epg-encrypt-file context file keys output-file)
                   (message "Cannot find key that matches %s." key-name)))
        (message "File %s does not exist." file))))
#+END_SRC

Encrypt a list of files:
#+BEGIN_SRC emacs-lisp
  (defun z-encrypt-files (files key-name)
    (let ((context (epg-make-context)) (keys))
      (setq keys (epg-list-keys context key-name))
      (if keys
          (dolist (file files)
            (epg-encrypt-file context file keys (concat file ".gpg")))
        (message "Cannot find key that matches %s." key-name))))
#+END_SRC

The following function descrypts file from string.
#+BEGIN_SRC emacs-lisp
  (defun z-decrypt-string (encrypted-string &optional out-file)
    "Decrypt ENCRYPTED-STRING and save the result in OUT-FILE.
  If OUT-FILE is nil, return the descrypted string."
    (let ((decrypt-string
           (lambda (encrypted-string)
             (epg-decrypt-string (epg-make-context) encrypted-string)))
          (need-decrypt-p
           (lambda ()
             (if (file-exists-p out-file)
                 (if (yes-or-no-p (format "File %s already exists. Overwrite? "  out-file))
                     (progn (delete-file out-file) t)
                   nil)
               t))))
      (if out-file
          (when (funcall need-decrypt-p)
            (append-to-file (funcall decrypt-string encrypted-string) nil out-file))
        (funcall decrypt-string encrypted-string))))
#+END_SRC

* Azure Database
SQL Server login info:
#+BEGIN_SRC emacs-lisp
  (setq sql-ms-login-params
        '((server :default "donzhu.database.windows.net")
          (database :default "donzhu_db")
          (user :default "donzhu")
          (password)))

  (setq sql-connection-alist
        '((mydb (sql-product 'ms)
                (sql-server "donzhu.database.windows.net")
                (sql-database "donzhu_db")
                (sql-user "donzhu"))))
#+END_SRC

The buffer name to show process.
#+BEGIN_SRC emacs-lisp
  (setq z-database-buffer "*My Database*")
#+END_SRC

Password cache:
#+BEGIN_SRC emacs-lisp
(setq z--database-password nil)
#+END_SRC

Prompt for password:
#+BEGIN_SRC emacs-lisp
  (defun z-database-password ()
    "Prompt for database password."
    (if z--database-password
        z--database-password
      (setq z--database-password (read-passwd "Database password: "))))
#+END_SRC


Upload file:
#+BEGIN_SRC emacs-lisp
  (defun z-upload-file (file file-id file-name)
    "Upload file to azure database."
    (setq file (expand-file-name file))
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_upload_file" z-database-buffer
                     "perl" "azure_db.pl" "upload"
                     "--file" file
                     "--file_id" file-id
                     "--file_name" file-name
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Pull file:
#+BEGIN_SRC emacs-lisp
  (defun z-pull-file (file-id output-file)
    "Pull file from azure database."
    (setq output-file (expand-file-name output-file))
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_pull_file" z-database-buffer
                     "perl" "azure_db.pl" "pull"
                     "--file_id" file-id
                     "--output_file" output-file
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Delete file:
#+BEGIN_SRC emacs-lisp
  (defun z-delete-file (file-id)
    "Delete file from azure database."
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_delete_file" z-database-buffer
                     "perl" "azure_db.pl" "delete"
                     "--file_id" file-id
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

List all files:
#+BEGIN_SRC emacs-lisp
    (defun z-list-files ()
      "List files in azure database."
      (interactive)
      (let ((default-directory "~/.emacs.d/perl"))
        (start-process "perl_list_files" z-database-buffer
                       "perl" "azure_db.pl" "list"
                       "--password" (z-database-password))
        (display-buffer z-database-buffer)))
#+END_SRC

Add tag:
#+BEGIN_SRC emacs-lisp
  (defun z-new-tag (tag-code tag-name)
    "Add new tag."
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_new_tag" z-database-buffer
                     "perl" "azure_db.pl" "newtag"
                     "--tag_code" tag-code
                     "--tag_name" tag-name
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Change tag name:
#+BEGIN_SRC emacs-lisp
  (defun z-change-tag-name (tag-code tag-name)
    "Change tag name."
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_rename_tag" z-database-buffer
                     "perl" "azure_db.pl" "renametag"
                     "--tag_code" tag-code
                     "--tag_name" tag-name
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

List tags:
#+BEGIN_SRC emacs-lisp
  (defun z-list-tags ()
    "List all tags."
    (interactive)
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_list_tags" z-database-buffer
                     "perl" "azure_db.pl" "tags"
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Add file tag:
#+BEGIN_SRC emacs-lisp
  (defun z-add-file-tag (file-id tag-code)
    "Add file tag."
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_add_file_tag" z-database-buffer
                     "perl" "azure_db.pl" "addfiletag"
                     "--file_id" file-id
                     "--tag_code" tag-code
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Remove file tag:
#+BEGIN_SRC emacs-lisp
  (defun z-remove-file-tag (file-id tag-code)
    "Remove file tag."
    (let ((default-directory "~/.emacs.d/perl"))
      (start-process "perl_add_file_tag" z-database-buffer
                     "perl" "azure_db.pl" "rmfiletag"
                     "--file_id" file-id
                     "--tag_code" tag-code
                     "--password" (z-database-password))
      (display-buffer z-database-buffer)))
#+END_SRC

Upload files in dired:
#+BEGIN_SRC emacs-lisp
  (defun z-upload ()
    "Upload files in dired."
    (interactive)
    (when (string= major-mode "dired-mode")
      (let ((files (dired-get-marked-files))
            (get-file-id
             (lambda (file)
               (file-name-nondirectory file)))
            (get-file-name
             (lambda (file)
               (file-name-nondirectory file))))
        (dolist (file files)
          (z-upload-file file
                         (funcall get-file-id file)
                         (funcall get-file-name file))))))
#+END_SRC

* Windows specific
** Win32 API wrappers
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (load-file "~/.emacs.d/mylisp/z-win.el"))
#+END_SRC

** AutoHotKey
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (load-file "~/.emacs.d/mylisp/z-ahk.el"))
#+END_SRC

** 7z
Define a variable to point to the 7z exe file.
#+BEGIN_SRC emacs-lisp
  (setq z-7z-exe "C:/Program Files/7-Zip/7z.exe")
#+END_SRC

The following function unzips the zip file using 7z.
#+BEGIN_SRC emacs-lisp
  (defun z-7z-unzip (file)
    "Unzip FILE with 7z into a folder with the same name as FILE."
    (let ((output-dir) (cmd))
      (setq file (expand-file-name file))
      (setq output-dir (concat (file-name-directory file) (file-name-base file)))
      (if (file-exists-p z-7z-exe)
          (progn
            (setq cmd (format "\"%s\" x \"%s\" -o\"%s\""
                              (z-string-win-style-path z-7z-exe)
                              (z-string-win-style-path file)
                              (z-string-win-style-path output-dir)))
            (message cmd)
            (async-shell-command cmd))
        (message "7z.exe not found"))))
#+END_SRC

The following interactive function unzips the file at point.
#+BEGIN_SRC emacs-lisp
  (defun z-7z-unzip-file-at-point ()
    "Unzip file at point using 7z."
    (interactive)
    (let ((file (if (string= major-mode "dired-mode")
                    (dired-copy-filename-as-kill 0)
                  (thing-at-point 'filename))))
      (if file
          (z-7z-unzip file)
        (message "No file at point."))))
#+END_SRC

** Visual studio
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (global-set-key (kbd "C-; C-o C-v") 'z-open-file-at-point-in-vs))
#+END_SRC

** SSMS
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (add-hook 'sql-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c s s") 'z-ssms-run-sql-in-region))))
#+END_SRC

** Path conversion
Convert path in region to standard Windows path.
#+BEGIN_SRC emacs-lisp
  (defun z-win-format-path-in-region ()
    "Convert path in region to standard Windows path."
    (interactive)
    (let ((file (buffer-substring-no-properties (region-beginning) (region-end))))
      (delete-region (region-beginning) (region-end))
      (insert (z-string-win-style-path file))))
#+END_SRC

* COMMENT Unused config that may be useful in the future
;; run as server
;; (require 'server)
;; (unless (server-running-p) (server-start))

;; macros
;(fset 'comment-c [?\C-a ?\C-x ?\C-x ?\C-a ?\C-x ?r ?t ?/ ?/ return])
;(put 'comment-c 'kmacro t)

;;auto-complete
;;(require 'auto-complete)
;;(global-auto-complete-mode t)

;; yasnippet
;;(add-to-list 'load-path "~/.emacs.d/snippets")
;;(require 'yasnippet)
;;(yas-global-mode 1)
;;(global-set-key (kbd "C-; TAB") 'yas-expand)

;; web-mode
;;(require 'web-mode)
;; (setq web-mode-markup-indent-offset 4)
;; (setq web-mode-css-indent-offset 4)
;; (setq web-mode-code-indent-offset 4)
;; (setq web-mode-script-padding 4)
;; (setq web-mode-style-padding 4)
;; (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.jsp?\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
;; (add-hook 'web-mode-hook
;;           (lambda ()
;;             (setq indent-tabs-mode nil)))

;; rainbow-mode
;; (require 'rainbow-mode)


;; (setq sql-mysql-program "/usr/local/bin/mysql")
;; (setq sql-mysql-login-params
;;       '((server :default "localhost")
;;         (port :default 3306)
;;         (database :default "test")
;;         (user :default "root")
;;         (password)))
;; (add-hook 'sql-interactive-mode-hook
;;           (lambda ()
;;             (toggle-truncate-lines t)))
;; ;;(setq sql-user "fc")
;; ;;(setq sql-password "Fc654321")
;; ;;(setq sql-server "192.168.8.8")
;; ;;(setq sql-mysql-options "optional command line options")
;; (setq sql-connection-alist
;;       '((local (sql-product 'mysql)
;;                (sql-server "localhost")
;;                (sql-port 3306)
;;                (sql-database "fcgyldb_dot3")
;;                (sql-user "root")
;;                (sql-password "mysql"))
;;         (dev (sql-product 'mysql)
;;               (sql-server "192.168.8.6")
;;               (sql-port 3306)
;;               (sql-database "fcgyldb_docker4")
;;               (sql-user "fc")
;;               (sql-password "Fc654321"))
;;         (prod (sql-product 'mysql)
;;               (sql-server "192.168.8.4")
;;               (sql-port 3309)
;;               (sql-database "zunpindb")
;;               (sql-user "readonly_user")
;;               (sql-password "Fengchao4006221999"))
;;         ))

;; (require 'clojure-mode)
;;(require 'cider-mode)

  ;; transparent frame
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
  ;(set-frame-parameter (selected-frame) 'alpha '(95 95))

  ;(add-to-list 'default-frame-alist '(alpha 95 95))
  ;(add-to-list 'default-frame-alist '(top . 10))
  ;(add-to-list 'default-frame-alist '(left . 0))
  ;(add-to-list 'default-frame-alist '(height . 65))
  ;(add-to-list 'default-frame-alist '(width . 240))

  ;; theme
  ;;(load-theme 'wombat t)
  ;;(load-theme 'deeper-blue t)
  ;(set-background-color "gray15")

  ;; line number
  ;;(global-linum-mode t)

;;(setq org-export-with-sub-superscripts nil) (setq
;;org-default-notes-file "/Users/dzhu/Documents/notes/notes.org")

;;(defun my-c++-mode-hook ()
;;  (c-set-style "my-style")
;;  (auto-fill-mode)
;;  (c-toggle-auto-hungry-state 0))
;;(add-hook 'c++-mode-hook 'my-c++-mode-hook)

;; open .h in c++ mode
;;(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  ;; buffer-menu
  ;;(global-set-key (kbd "C-x C-b") 'buffer-menu)
